Much of the Node.js core API is built around an idiomatic asynchronous event-driven architecture
 in which certain kinds of objects (called "emitters") periodically emit named events that cause
 Function objects ("listeners") to be called. For instance: a net.Server object emits an event each
time a peer connects to it; a fs.ReadStream emits an event when the file is opened; a stream emits
an event whenever data is available to be read

When the EventEmitter object emits an event, all of the functions attached to that specific event are called synchronously.

Asynchronous vs. Synchronous

      The EventListener calls all listeners synchronously in the order in which they were registered. This is important to ensure
      the proper sequencing of events and to avoid race conditions or logic errors. When appropriate, listener functions can switch
      to an asynchronous mode of operation using the setImmediate() or process.nextTick() methods:

        const myEmitter = new MyEmitter();
        myEmitter.on('event', (a, b) => {
            setImmediate(() => {
              console.log('this happens asynchronously');
            });
        });
        myEmitter.emit('event', 'a', 'b');
